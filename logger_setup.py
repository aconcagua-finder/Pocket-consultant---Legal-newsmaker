"""
Unified Logger Setup –¥–ª—è NEWSMAKER
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–∞–∑–æ–≤–æ–≥–æ –∏ modern –ª–æ–≥–≥–µ—Ä–∞ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Rich
"""

import sys
import os
from pathlib import Path
from datetime import datetime
from typing import Optional, List
from loguru import logger

import config

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Rich, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
try:
    from rich.console import Console
    from rich.logging import RichHandler
    from rich.table import Table
    from rich.panel import Panel
    from rich.text import Text
    from rich import print as rprint
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False


class UnifiedLogger:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Rich"""
    
    def __init__(self, use_rich: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            use_rich: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Rich –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        """
        self.use_rich = use_rich and RICH_AVAILABLE
        self.console = Console() if self.use_rich else None
        
        # –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∏–∫–æ–Ω–∫–∏ –∏ —Ü–≤–µ—Ç–∞
        self.level_icons = {
            'DEBUG': ('üîç', 'dim cyan', '[DEBUG]'),
            'INFO': ('üìä', 'blue', '[INFO]'),
            'SUCCESS': ('‚úÖ', 'green', '[OK]'),
            'WARNING': ('‚ö†Ô∏è', 'yellow', '[WARN]'),
            'ERROR': ('‚ùå', 'red', '[ERROR]'),
            'CRITICAL': ('üí•', 'bold red', '[CRITICAL]')
        }
    
    def setup(self, log_level: str = None, log_file: str = None):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
            log_file: –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
        """
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.remove()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ config –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        log_level = log_level or config.LOG_LEVEL
        log_file = log_file or config.LOG_FILE
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        if self.use_rich and sys.stdout.isatty():
            self._setup_rich_console(log_level)
        else:
            self._setup_text_console(log_level)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_file_logging(logs_dir, log_file)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        logger.info("üìù –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É: {logs_dir.absolute()}")
        logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")
        if self.use_rich:
            logger.info("üé® Rich —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
    
    def _setup_rich_console(self, log_level: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Rich –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        
        def rich_format(record):
            """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Rich"""
            level = record["level"].name
            icon, color, _ = self.level_icons.get(level, ('üìù', 'white', '[LOG]'))
            
            time_str = record["time"].strftime("%H:%M:%S")
            message = record["message"]
            
            if level in ["ERROR", "CRITICAL"]:
                return f"[bold {color}]{icon}[/bold {color}] [{color}]{time_str}[/{color}] {message}"
            else:
                return f"{icon} [dim]{time_str}[/dim] {message}"
        
        logger.add(
            RichHandler(console=self.console, rich_tracebacks=True),
            format=rich_format,
            level=log_level
        )
    
    def _setup_text_console(self, log_level: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        
        # –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (–∫—Ä–∞—Å–∏–≤—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π)
        console_format = (
            "<green>{time:HH:mm:ss}</green> | "
            "<level>{level: <8}</level> | "
            "<level>{message}</level>"
        )
        
        logger.add(
            sys.stdout,
            format=console_format,
            level=log_level,
            colorize=True,
            enqueue=True
        )
    
    def _setup_file_logging(self, logs_dir: Path, log_file: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –§–æ—Ä–º–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª (–ø–æ–¥—Ä–æ–±–Ω—ã–π)
        file_format = (
            "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
            "<level>{level: <8}</level> | "
            "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
            "<level>{message}</level>"
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        logger.add(
            logs_dir / log_file,
            format=file_format,
            level="DEBUG",
            rotation="10 MB",
            retention="30 days",
            compression="zip",
            enqueue=True,
            encoding="utf-8"
        )
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
        logger.add(
            logs_dir / "errors.log",
            format=file_format,
            level="ERROR",
            rotation="5 MB",
            retention="60 days",
            compression="zip",
            enqueue=True,
            encoding="utf-8"
        )
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        daily_log_name = f"daily_{datetime.now().strftime('%Y%m')}.log"
        logger.add(
            logs_dir / daily_log_name,
            format=file_format,
            level="INFO",
            filter=lambda record: any(keyword in record["message"].lower() 
                                     for keyword in ["–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏", "daily job"]) or
                                 any(emoji in record["message"] 
                                     for emoji in ["üöÄ", "‚úÖ", "‚ùå"]),
            rotation="1 month",
            retention="12 months",
            compression="zip",
            enqueue=True,
            encoding="utf-8"
        )
    
    def print_startup_banner(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        
        if self.use_rich and self.console:
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä —Å Rich
            banner = Panel.fit(
                Text.from_markup(
                    "[bold cyan]NEWSMAKER[/bold cyan] [dim]v2.3.1[/dim]\n"
                    "[yellow]–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –†–§[/yellow]\n"
                    f"[dim]{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}[/dim]",
                    justify="center"
                ),
                border_style="bright_blue",
                padding=(1, 2)
            )
            self.console.print(banner)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            table = Table(title="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", show_header=False)
            table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
            table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green")
            
            table.add_row("üìÖ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π", config.COLLECTION_TIME)
            table.add_row("üì∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π", "7 –≤ –¥–µ–Ω—å")
            table.add_row("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", f"{len(config.PUBLICATION_SCHEDULE)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            table.add_row("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–í–∫–ª—é—á–µ–Ω–∞")
            
            self.console.print(table)
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                  NEWSMAKER                     ‚ïë
    ‚ïë            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å               ‚ïë
    ‚ïë         —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –†–§                ‚ïë
    ‚ïë                                                ‚ïë
    ‚ïë  ü§ñ AI: Perplexity Sonar Deep Research        ‚ïë
    ‚ïë  üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è: Telegram                      ‚ïë
    ‚ïë  ‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 7 –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å           ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            """
            
            for line in banner.strip().split('\n'):
                logger.opt(colors=True).info(f"<cyan>{line}</cyan>")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
_unified_logger = None


def setup_logger(use_rich: bool = False, log_level: str = None, log_file: str = None):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    
    Args:
        use_rich: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Rich –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_file: –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
    """
    global _unified_logger
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Rich –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # –ï—Å–ª–∏ Rich –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º
    if use_rich is None:
        use_rich = RICH_AVAILABLE and sys.stdout.isatty()
    
    _unified_logger = UnifiedLogger(use_rich)
    _unified_logger.setup(log_level, log_file)
    
    return _unified_logger


def log_system_info():
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("=" * 60)
    logger.info("üåü NEWSMAKER - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")
    logger.info("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    import platform
    logger.info(f"üíª –°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    logger.info(f"üêç Python: {platform.python_version()}")
    logger.info(f"üìÖ –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    
    perplexity_key_ok = bool(config.PERPLEXITY_API_KEY)
    telegram_token_ok = bool(config.TELEGRAM_BOT_TOKEN)
    telegram_channel_ok = bool(config.TELEGRAM_CHANNEL_ID)
    
    logger.info(f"  ‚úì Perplexity API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if perplexity_key_ok else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"  ‚úì Telegram —Ç–æ–∫–µ–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_token_ok else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"  ‚úì Telegram –∫–∞–Ω–∞–ª: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if telegram_channel_ok else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"  ‚úì –í—Ä–µ–º—è —Å–±–æ—Ä–∞: {config.COLLECTION_TIME}")
    logger.info(f"  ‚úì Rich –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ –î–∞' if RICH_AVAILABLE else '‚ùå –ù–µ—Ç'}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not telegram_token_ok:
        logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    if not telegram_channel_ok:
        logger.warning("‚ö†Ô∏è TELEGRAM_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    config_complete = perplexity_key_ok and telegram_token_ok and telegram_channel_ok
    
    if config_complete:
        logger.info("üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–∞—è - –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    
    logger.info("=" * 60)


def log_startup_banner():
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global _unified_logger
    
    if _unified_logger:
        _unified_logger.print_startup_banner()
    else:
        # Fallback –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        logger.info("üöÄ NEWSMAKER v2.3.1 - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")


def get_log_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    logs_dir = Path("logs")
    
    if not logs_dir.exists():
        return "–ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    stats = []
    stats.append(f"üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {logs_dir.absolute()}")
    
    # –†–∞–∑–º–µ—Ä –≤—Å–µ—Ö –ª–æ–≥ —Ñ–∞–π–ª–æ–≤
    total_size = 0
    log_count = 0
    
    for log_file in logs_dir.glob("*.log*"):
        if log_file.is_file():
            size = log_file.stat().st_size
            total_size += size
            log_count += 1
            
            # –ß–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
            if size < 1024:
                size_str = f"{size} B"
            elif size < 1024 * 1024:
                size_str = f"{size / 1024:.1f} KB"
            else:
                size_str = f"{size / (1024 * 1024):.1f} MB"
            
            stats.append(f"  üìÑ {log_file.name}: {size_str}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if total_size < 1024:
        total_str = f"{total_size} B"
    elif total_size < 1024 * 1024:
        total_str = f"{total_size / 1024:.1f} KB"
    else:
        total_str = f"{total_size / (1024 * 1024):.1f} MB"
    
    stats.insert(1, f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {log_count}, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_str}")
    
    return "\n".join(stats)


def get_logger():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π logger –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö"""
    return logger


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logger(use_rich=True)
    log_startup_banner()
    log_system_info()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.debug("üîç –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.info("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.success("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    logger.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    logger.error("‚ùå –û—à–∏–±–∫–∞")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + get_log_stats())