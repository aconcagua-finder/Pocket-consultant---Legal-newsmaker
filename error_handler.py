"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è NEWSMAKER

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
"""

import sys
import traceback
from typing import Any, Callable, Optional, Type, Union
from functools import wraps
from loguru import logger
from datetime import datetime

import config
from timezone_utils import now_msk, format_msk_time


# ========================================================================
# CUSTOM EXCEPTIONS - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
# ========================================================================

class NewsmakerException(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ NEWSMAKER"""
    pass


class APIException(NewsmakerException):
    """–û—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API"""
    pass


class PerplexityAPIException(APIException):
    """–û—à–∏–±–∫–∏ Perplexity API"""
    pass


class OpenAIAPIException(APIException):
    """–û—à–∏–±–∫–∏ OpenAI API"""
    pass


class TelegramAPIException(APIException):
    """–û—à–∏–±–∫–∏ Telegram API"""
    pass


class ConfigurationException(NewsmakerException):
    """–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass


class FileOperationException(NewsmakerException):
    """–û—à–∏–±–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    pass


class ValidationException(NewsmakerException):
    """–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass


class ContentGenerationException(NewsmakerException):
    """–û—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    pass


class SchedulingException(NewsmakerException):
    """–û—à–∏–±–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    pass


# ========================================================================
# ERROR HANDLERS - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
# ========================================================================

def handle_exception(
    exception: Exception,
    context: Optional[str] = None,
    critical: bool = False,
    user_message: Optional[str] = None
) -> None:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    
    Args:
        exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        critical: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
        user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error_type = type(exception).__name__
    error_message = str(exception)
    
    # –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_message = f"[{error_type}]"
    if context:
        log_message += f" –≤ {context}"
    log_message += f": {error_message}"
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —É—Ä–æ–≤–Ω–µ–º
    if critical:
        logger.critical(log_message)
        logger.critical(f"Traceback:\n{traceback.format_exc()}")
    else:
        logger.error(log_message)
        if config.DEBUG_MODE:
            logger.debug(f"Traceback:\n{traceback.format_exc()}")
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_message:
        logger.info(f"üí¨ {user_message}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è
    if critical:
        save_error_to_file(exception, context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if critical and hasattr(config, 'SEND_ERROR_NOTIFICATIONS') and config.SEND_ERROR_NOTIFICATIONS:
        send_error_notification(exception, context)


def save_error_to_file(exception: Exception, context: Optional[str] = None) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª
    
    Args:
        exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    """
    try:
        from pathlib import Path
        error_dir = Path(config.LOGS_DIR) / "errors"
        error_dir.mkdir(exist_ok=True)
        
        timestamp = now_msk().strftime('%Y%m%d_%H%M%S')
        error_file = error_dir / f"error_{timestamp}.txt"
        
        with open(error_file, 'w', encoding='utf-8') as f:
            f.write(f"Error Report - {format_msk_time()}\n")
            f.write("=" * 60 + "\n\n")
            
            if context:
                f.write(f"Context: {context}\n")
            
            f.write(f"Exception Type: {type(exception).__name__}\n")
            f.write(f"Exception Message: {str(exception)}\n\n")
            
            f.write("Traceback:\n")
            f.write(traceback.format_exc())
            f.write("\n" + "=" * 60 + "\n")
            
        logger.debug(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {error_file}")
        
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª: {e}")


def send_error_notification(exception: Exception, context: Optional[str] = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    
    Args:
        exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ Email
    pass


# ========================================================================
# DECORATORS - –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
# ========================================================================

def safe_execution(
    default_return: Any = None,
    exceptions: tuple = (Exception,),
    context: Optional[str] = None,
    critical: bool = False
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    
    Args:
        default_return: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        exceptions: Tuple –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        critical: –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            try:
                return func(*args, **kwargs)
            except exceptions as e:
                handle_exception(
                    e,
                    context=context or func.__name__,
                    critical=critical
                )
                return default_return
        return wrapper
    return decorator


def calculate_backoff_time(attempt: int, base_delay: float = 1.0, max_delay: float = 60.0) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º
    
    Args:
        attempt: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
        base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        max_delay: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    Returns:
        –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    delay = min(base_delay * (2 ** attempt), max_delay)
    return delay


def is_retryable_error(exception: Exception) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ —ç—Ç–æ–π –æ—à–∏–±–∫–∏
    
    Args:
        exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Returns:
        True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    """
    # –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    retryable_errors = (
        ConnectionError,
        TimeoutError,
        APIException,
        PerplexityAPIException,
        OpenAIAPIException,
        TelegramAPIException,
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    if isinstance(exception, retryable_errors):
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error_msg = str(exception).lower()
    retryable_messages = [
        'timeout', 'timed out',
        'connection', 'connect',
        'rate limit', 'too many requests',
        'temporary', 'temporarily',
        '500', '502', '503', '504',
        'retry', 'try again'
    ]
    
    return any(msg in error_msg for msg in retryable_messages)


def retry_on_error(
    max_attempts: int = 3,
    exceptions: tuple = (Exception,),
    delay: float = 1.0,
    backoff: float = 2.0
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
        exceptions: –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
        delay: –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        backoff: –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            attempt = 0
            current_delay = delay
            
            while attempt < max_attempts:
                try:
                    return func(*args, **kwargs)
                except exceptions as e:
                    attempt += 1
                    
                    if attempt >= max_attempts:
                        logger.error(f"–í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {func.__name__}")
                        raise
                    
                    logger.warning(
                        f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –Ω–µ—É–¥–∞—á–Ω–∞ –¥–ª—è {func.__name__}, "
                        f"–ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {current_delay:.1f} —Å–µ–∫"
                    )
                    
                    import time
                    time.sleep(current_delay)
                    current_delay *= backoff
                    
        return wrapper
    return decorator


def validate_input(**validators):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    Args:
        **validators: –°–ª–æ–≤–∞—Ä—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            import inspect
            sig = inspect.signature(func)
            bound = sig.bind(*args, **kwargs)
            bound.apply_defaults()
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            for param_name, validator in validators.items():
                if param_name in bound.arguments:
                    value = bound.arguments[param_name]
                    
                    if not validator(value):
                        raise ValidationException(
                            f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ {func.__name__}"
                        )
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


# ========================================================================
# CONTEXT MANAGERS - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
# ========================================================================

class ErrorContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞"""
    
    def __init__(
        self,
        context: str,
        suppress: bool = False,
        default_return: Any = None,
        critical: bool = False
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        
        Args:
            context: –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            suppress: –ü–æ–¥–∞–≤–ª—è—Ç—å –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            default_return: –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            critical: –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫
        """
        self.context = context
        self.suppress = suppress
        self.default_return = default_return
        self.critical = critical
        self.exception = None
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type:
            self.exception = exc_val
            handle_exception(
                exc_val,
                context=self.context,
                critical=self.critical
            )
            
            if self.suppress:
                return True  # –ü–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        
        return False


# ========================================================================
# ERROR RECOVERY - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
# ========================================================================

def attempt_recovery(
    error_type: Type[Exception],
    recovery_action: Callable,
    max_attempts: int = 1
) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
    
    Args:
        error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
        recovery_action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        max_attempts: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
        
    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    for attempt in range(max_attempts):
        try:
            recovery_action()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ {error_type.__name__}")
            return True
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {attempt+1}/{max_attempts} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
    
    return False


# ========================================================================
# ERROR REPORTING - –û—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö
# ========================================================================

def generate_error_report() -> dict:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –∑–∞ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    """
    from pathlib import Path
    
    report = {
        'timestamp': format_msk_time(),
        'total_errors': 0,
        'critical_errors': 0,
        'errors_by_type': {},
        'recent_errors': []
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
    log_file = Path(config.LOGS_DIR) / "newsmaker.log"
    if log_file.exists():
        with open(log_file, 'r', encoding='utf-8') as f:
            for line in f:
                if 'ERROR' in line or 'CRITICAL' in line:
                    report['total_errors'] += 1
                    
                    if 'CRITICAL' in line:
                        report['critical_errors'] += 1
    
    return report


# ========================================================================
# TESTING - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ========================================================================

def test_error_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫...")
    
    # –¢–µ—Å—Ç safe_execution
    @safe_execution(default_return="default", context="test_function")
    def failing_function():
        raise ValueError("Test error")
    
    result = failing_function()
    assert result == "default", "safe_execution –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    logger.info("‚úÖ safe_execution —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç retry_on_error
    counter = {'attempts': 0}
    
    @retry_on_error(max_attempts=3, delay=0.1)
    def flaky_function():
        counter['attempts'] += 1
        if counter['attempts'] < 3:
            raise ConnectionError("Test connection error")
        return "success"
    
    result = flaky_function()
    assert result == "success", "retry_on_error –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    assert counter['attempts'] == 3, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫"
    logger.info("‚úÖ retry_on_error —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç ErrorContext
    with ErrorContext("test_context", suppress=True) as ctx:
        raise RuntimeError("Test runtime error")
    
    assert ctx.exception is not None, "ErrorContext –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"
    logger.info("‚úÖ ErrorContext —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã")


if __name__ == "__main__":
    test_error_handlers()