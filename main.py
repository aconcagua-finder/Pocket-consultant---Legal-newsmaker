#!/usr/bin/env python3
"""
NEWSMAKER - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –†–§

–ü–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ Perplexity AI
–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∏—Ö –≤ Telegram –∫–∞–Ω–∞–ª–µ.

"""

import sys
import argparse
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π
from logger_setup import setup_logger, log_startup_banner, log_system_info, get_log_stats

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from perplexity_client import PerplexityClient
from telegram_client import TelegramClient
from news_collector import NewsCollector
from news_publisher import NewsPublisher

# –ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º wrapper –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
# scheduler.py —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º news_scheduler –Ω–∞–ø—Ä—è–º—É—é
from news_scheduler import NewsmakerScheduler as DirectNewsScheduler  # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É

import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logger()
from loguru import logger


def test_mode():
    """–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    scheduler = DirectNewsScheduler()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    success = scheduler.test_components()
    
    if success:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return False


def manual_run():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.info("üöÄ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏...")
    
    scheduler = DirectNewsScheduler()
    scheduler.run_once_now()
    
    logger.info("‚úÖ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")


def scheduler_mode():
    """–†–µ–∂–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"""
    logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    
    scheduler = DirectNewsScheduler()
    
    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    logger.info("üîß –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    if not scheduler.test_components():
        logger.error("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")
        logger.error("üõë –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        return False
    
    logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        scheduler.start_scheduler()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        return False
    
    return True


def collect_news_mode():
    """–†—É—á–Ω–æ–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.info("üîç –†—É—á–Ω–æ–π —Å–±–æ—Ä –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    collector = NewsCollector()
    success = collector.collect_daily_news()
    
    if success:
        status = collector.get_news_file_status()
        logger.info(f"üìä –°–æ–±—Ä–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {status.get('total_news', 0)}")
        logger.info("‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π")
        sys.exit(1)


def publish_next_mode():
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏"""
    logger.info("üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏...")
    
    publisher = NewsPublisher()
    result = publisher.publish_next_scheduled_news()
    
    if result['success']:
        title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        logger.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {title[:50]}...")
    else:
        reason = result.get('reason', 'unknown')
        if reason == 'no_news_ready':
            logger.info("üì∞ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {reason}")
            sys.exit(1)


def force_publish_mode(priority: int):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
    logger.info(f"üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}...")
    
    publisher = NewsPublisher()
    success = publisher.force_publish_by_priority(priority)
    
    if success:
        logger.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
    else:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority}")
        sys.exit(1)


def test_publish_all_mode():
    """–¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥—Ä—è–¥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    logger.info("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥—Ä—è–¥...")
    
    publisher = NewsPublisher()
    result = publisher.publish_all_news_for_testing(interval=6)
    
    if result['success']:
        total = result['total_news']
        successful = result['successful_count']
        failed = result['failed_count']
        rate = result['success_rate'] * 100
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} —É—Å–ø–µ—à–Ω–æ ({rate:.1f}%)")
        
        if failed > 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {failed}")
    else:
        reason = result.get('reason', 'unknown')
        message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {reason} - {message}")
        sys.exit(1)


def status_mode():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
    logger.info("=" * 50)
    
    # –°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞
    collector = NewsCollector()
    collection_status = collector.get_news_file_status()
    
    logger.info("üîç –°–ë–û–† –ù–û–í–û–°–¢–ï–ô:")
    if collection_status['exists']:
        logger.info(f"   ‚úÖ –§–∞–π–ª –Ω–æ–≤–æ—Å—Ç–µ–π: {collection_status['date']}")
        logger.info(f"   üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {collection_status.get('total_news', 0)}")
        logger.info(f"   ‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞: {collection_status.get('collected_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    else:
        logger.info("   ‚ùå –ù–æ–≤–æ—Å—Ç–∏ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã")
    
    # –°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    publisher = NewsPublisher()
    publication_status = publisher.get_publication_status()
    
    logger.info("\nüì± –ü–£–ë–õ–ò–ö–ê–¶–ò–ò:")
    if publication_status['file_exists']:
        total = publication_status['total_news']
        published = publication_status['published_count']
        unpublished = publication_status['unpublished_count']
        
        logger.info(f"   üìä –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published}/{total}")
        logger.info(f"   ‚è≥ –û–∂–∏–¥–∞—é—Ç: {unpublished}")
        
        logger.info("\n   üìã –î–ï–¢–ê–õ–ò:")
        for detail in publication_status.get('news_details', []):
            status_icon = "‚úÖ" if detail['published'] else "‚è≥"
            priority = detail['priority']
            time_str = detail['scheduled_time']
            title = detail['title']
            
            if detail['published']:
                logger.info(f"   {status_icon} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority} ({time_str}): {title}")
            else:
                logger.info(f"   {status_icon} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority} ({time_str}): {title}")
    else:
        logger.info("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö")
    
    logger.info("=" * 50)


def info_mode():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    log_startup_banner()
    log_system_info()
    
    logger.info("\n" + "üìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í:")
    stats = get_log_stats()
    for line in stats.split('\n'):
        logger.info(f"   {line}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    logger.info("\n" + "üéØ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    logger.info("   python main.py --test        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    logger.info("   python main.py --start       # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    logger.info("   python main.py --status      # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    logger.info("\n" + "üõ†Ô∏è –ö–û–ú–ê–ù–î–´ –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
    logger.info("   python main.py --collect        # –†—É—á–Ω–æ–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π")
    logger.info("   python main.py --publish-next   # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏")
    logger.info("   python main.py --force-publish N # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç N (1-5)")
    logger.info("   python main.py --test-publish-all # üß™ –¢–ï–°–¢: –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥")
    
    logger.info("\n" + "üîÑ LEGACY –ö–û–ú–ê–ù–î–´:")
    logger.info("   python main.py --run         # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º)")
    logger.info("   python main.py --info        # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")


def setup_dotenv_if_needed():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    env_file = Path(".env")
    
    if not env_file.exists():
        logger.warning("üìù –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –∏–∑ —à–∞–±–ª–æ–Ω–∞...")
        
        env_content = """# –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ env_example.txt
# –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏

TELEGRAM_BOT_TOKEN=your_bot_token_here
TELEGRAM_CHANNEL_ID=your_channel_id_here
"""
        
        try:
            env_file.write_text(env_content, encoding='utf-8')
            logger.info("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
            logger.warning("‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHANNEL_ID!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .env: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä
    log_startup_banner()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="NEWSMAKER - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –†–§",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py --info     # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
  python main.py --test     # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤  
  python main.py --run      # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
  python main.py --start    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º)

–î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:
  1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª (—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∫–∞–Ω–∞–ª–∞)
  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python main.py --test
  3. –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª, –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --start
        """
    )
    
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--test', action='store_true', 
                      help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã')
    group.add_argument('--start', action='store_true',
                      help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º)')
    group.add_argument('--status', action='store_true',
                      help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
    
    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    group.add_argument('--collect', action='store_true',
                      help='–†—É—á–Ω–æ–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π')
    group.add_argument('--publish-next', action='store_true',
                      help='–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏')
    group.add_argument('--force-publish', type=int, metavar='N',
                      help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç N (1-5)')
    group.add_argument('--test-publish-all', action='store_true',
                      help='üß™ –¢–ï–°–¢: –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 6 —Å–µ–∫')
    
    # Legacy –∫–æ–º–∞–Ω–¥—ã
    group.add_argument('--run', action='store_true',
                      help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é (legacy)')
    group.add_argument('--info', action='store_true',
                      help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    setup_dotenv_if_needed()
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    log_system_info()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    try:
        if args.test:
            success = test_mode()
            sys.exit(0 if success else 1)
            
        elif args.start:
            success = scheduler_mode()
            sys.exit(0 if success else 1)
            
        elif args.status:
            status_mode()
            sys.exit(0)
            
        # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        elif args.collect:
            collect_news_mode()
            sys.exit(0)
            
        elif args.publish_next:
            publish_next_mode()
            sys.exit(0)
            
        elif args.force_publish:
            if args.force_publish < 1 or args.force_publish > 7:
                logger.error("‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 7")
                sys.exit(1)
            force_publish_mode(args.force_publish)
            sys.exit(0)
            
        elif args.test_publish_all:
            test_publish_all_mode()
            sys.exit(0)
            
        # Legacy –∫–æ–º–∞–Ω–¥—ã
        elif args.run:
            manual_run()
            sys.exit(0)
            
        elif args.info:
            info_mode()
            sys.exit(0)
            
        else:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info_mode()
            logger.info("\nüí° –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (—Å–º. –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ)")
            sys.exit(0)
            
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        sys.exit(1)


if __name__ == "__main__":
    main() 